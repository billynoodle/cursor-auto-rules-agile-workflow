---
description: IMPLEMENT comprehensive testing with clear boundaries between test types to PREVENT overlap and ENSURE effective coverage
globs: **/*.{test,spec}.{ts,js,tsx,jsx}
---

# Testing Framework Organization

<version>1.0.0</version>

## Context
- Applied when implementing test suites across unit, integration, and end-to-end testing
- Used during initial test creation and test refactoring
- Critical for maintaining non-redundant test coverage
- Important for CI pipeline optimization

## Requirements
- Clearly delineate responsibilities for each testing layer
- Prevent overlapping test scenarios across layers
- Implement appropriate test coverage metrics
- Follow consistent naming conventions for test types
- Configure test overlap detection tools
- Document testing strategy for each module

## Test Layer Boundaries

### Unit Tests
- MUST test individual functions, methods, and components in isolation
- MUST mock all external dependencies
- MUST NOT test integration between multiple real components
- MUST follow naming pattern: `{component}.unit.test.{ext}`
- SHOULD achieve >80% code coverage for core business logic

### Integration Tests
- MUST test interactions between related modules and services
- MUST use real implementations for immediate dependencies
- MUST mock external services (databases, APIs)
- MUST follow naming pattern: `{feature}.integration.test.{ext}`
- SHOULD focus on API contracts and data flow

### End-to-End Tests
- MUST test complete user flows and critical business scenarios
- MUST use real implementations of all components when possible
- MUST include only critical user journeys
- MUST follow naming pattern: `{workflow}.e2e.test.{ext}`
- SHOULD be limited to 15-20 key business scenarios

## Examples

<example>
// GOOD: Clear unit test with proper isolation
// user-authentication.unit.test.ts
describe('UserAuthentication', () => {
  beforeEach(() => {
    // Mock dependencies
    jest.mock('../services/database');
    jest.mock('../services/token-generator');
  });

  test('should validate user credentials', () => {
    const result = UserAuthentication.validateCredentials({
      username: 'testuser',
      password: 'password123'
    });
    expect(result.isValid).toBe(true);
  });
});

// GOOD: Integration test focused on module interaction
// login-flow.integration.test.ts
describe('Login Flow', () => {
  beforeEach(() => {
    // Use real AuthService but mock external APIs
    jest.mock('../services/external-api');
  });

  test('should authenticate and generate session token', async () => {
    const authService = new AuthService();
    const tokenService = new TokenService();
    
    const user = await authService.authenticate('user', 'pass');
    const token = await tokenService.generateFor(user);
    
    expect(token).toBeTruthy();
    expect(authService.currentUser).toEqual(user);
  });
});

// GOOD: End-to-end test for critical user journey
// user-onboarding.e2e.test.ts
describe('User Onboarding Flow', () => {
  test('should allow new user to register, verify email and complete profile', async () => {
    await page.goto('/register');
    await page.fill('input[name="email"]', 'new@example.com');
    await page.fill('input[name="password"]', 'securepass');
    await page.click('button[type="submit"]');
    
    // Verify redirect to email verification
    expect(page.url()).toContain('/verify-email');
    
    // Simulate email verification
    await verifyEmailForUser('new@example.com');
    
    // Complete profile
    await page.goto('/complete-profile');
    await page.fill('input[name="fullName"]', 'New User');
    await page.click('button[type="submit"]');
    
    // Verify redirect to dashboard
    expect(page.url()).toContain('/dashboard');
  });
});
</example>

<example type="invalid">
// BAD: Overlapping test scenarios across layers
// authentication.unit.test.ts
test('should log user in and redirect to dashboard', async () => {
  // This tests too much for a unit test
  const result = await authService.login('user', 'pass');
  await checkDatabaseForUserRecord('user');
  await verifyRedirectToDashboard();
});

// authentication.integration.test.ts
test('should log user in and redirect to dashboard', async () => {
  // Duplicates the same test from unit level
  const result = await authService.login('user', 'pass');
  await checkDatabaseForUserRecord('user');
  await verifyRedirectToDashboard();
});

// BAD: Unit test that's actually an integration test
// user.unit.test.ts
test('should create user and store in database', async () => {
  // Not mocking the database - actually testing integration
  const user = new User('test@example.com');
  await user.save();
  
  const dbUser = await User.findByEmail('test@example.com');
  expect(dbUser).toBeTruthy();
});
</example>

## Test Configuration Guidelines

### Jest Configuration
```javascript
// jest.config.js
module.exports = {
  collectCoverage: true,
  collectCoverageFrom: [
    "src/**/*.{js,jsx,ts,tsx}",
    "!src/**/*.d.ts",
    "!src/mocks/**/*",
    "!src/types/**/*"
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  },
  testMatch: [
    "**/__tests__/**/*.{js,jsx,ts,tsx}",
    "**/?(*.)+(spec|test).{js,jsx,ts,tsx}"
  ],
  // Use different setup files for different test types
  setupFilesAfterEnv: [
    "<rootDir>/src/setupTests.js",
    "<rootDir>/src/setupIntegrationTests.js"
  ]
}
```

### Test Overlap Detection
- Use custom scripts to detect similar test descriptions
- Track test coverage overlap between different test suites
- Implement automated warnings for duplicative tests 