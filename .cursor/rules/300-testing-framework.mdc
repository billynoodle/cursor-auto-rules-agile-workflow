---
description: IMPLEMENT comprehensive testing with clear boundaries between test types to PREVENT overlap and ENSURE effective coverage
globs: **/*.{test,spec}.{ts,js,tsx,jsx}
alwaysApply: false
---
## Context
- Applied when implementing test suites across unit, integration, and end-to-end testing
- Used during initial test creation and test refactoring
- Critical for maintaining non-redundant test coverage
- Important for CI pipeline optimization
- Focused on React component testing with React Testing Library

## Requirements
- Clearly delineate responsibilities for each testing layer
- Prevent overlapping test scenarios across layers
- Implement appropriate test coverage metrics
- Follow consistent naming conventions for test types
- Configure test overlap detection tools
- Document testing strategy for each module
- Use test providers for consistent component context

## Test Layer Boundaries

### Unit Tests
- MUST test individual functions, methods, and components in isolation
- MUST mock all external dependencies and services
- MUST use test providers for component context when needed
- MUST follow naming pattern: `{component}.test.{ext}` or `{component}.unit.test.{ext}`
- MUST use React Testing Library for component testing
- SHOULD achieve >80% code coverage for core business logic
- SHOULD mock window/document objects when testing browser APIs

### Integration Tests
- MUST test interactions between related modules and services
- MUST use real implementations for immediate dependencies
- MUST mock external services (databases, APIs)
- MUST follow naming pattern: `{feature}.integration.test.{ext}`
- SHOULD focus on API contracts and data flow
- SHOULD test component integration with services

### End-to-End Tests
- MUST test complete user flows and critical business scenarios
- MUST use real implementations of all components when possible
- MUST include only critical user journeys
- MUST follow naming pattern: `{workflow}.e2e.test.{ext}`
- SHOULD be limited to 15-20 key business scenarios

### Test Results Management
- MUST use TestResultsStore for persistent test result storage
- MUST store results in `/tests/results` directory with subdirectories:
  - `/junit` - Test execution results by test type
  - `/metrics` - Test metrics and coverage data
  - `/coverage` - Code coverage reports
- MUST include metadata with each test result:
  - Unique test ID
  - Timestamp
  - Test type
  - Status (passed/failed/skipped)
  - Duration
- MUST maintain historical test results for trend analysis
- SHOULD implement result indexing for efficient retrieval
- SHOULD extract and store metrics separately from raw results

## Examples

<example>
// GOOD: Clear unit test with proper isolation and test provider
// TooltipUserTesting.test.tsx
describe('TooltipUserTesting Component', () => {
  const mockQuestionId = 'q123';
  const mockTooltipText = 'Test tooltip text';
  const mockOnFeedbackSubmit = jest.fn();
  
  beforeEach(() => {
    jest.useFakeTimers();
    // Mock window APIs
    Object.defineProperty(window, 'innerWidth', {
      writable: true,
      configurable: true,
      value: 1024
    });
  });

  test('renders the component correctly', () => {
    render(withTestProvider(TooltipUserTesting, {
      questionId: mockQuestionId,
      tooltipText: mockTooltipText,
      onFeedbackSubmit: mockOnFeedbackSubmit
    }));
    
    expect(screen.getByTestId('tooltip-container')).toBeInTheDocument();
  });
});

// GOOD: Integration test with service dependencies
// TooltipTestingDemo.test.tsx
describe('TooltipTestingDemo', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('submits feedback and shows history', async () => {
    render(<TooltipTestingDemo />);
    
    fireEvent.click(screen.getByText('Show Tooltip'));
    fireEvent.click(screen.getByLabelText('Clear (5)'));
    
    expect(tooltipUserTestingService.submitFeedback).toHaveBeenCalledWith({
      questionId: 'demo-question',
      clarityRating: 5,
      feedbackText: '',
      difficultTerms: []
    });
  });
});

// GOOD: End-to-end test for critical user journey
// UserOnboarding.e2e.test.tsx
describe('User Onboarding Flow', () => {
  test('completes full onboarding process', async () => {
    await page.goto('/onboarding');
    await page.fill('[data-testid="name-input"]', 'Test User');
    await page.click('[data-testid="submit-button"]');
    
    expect(page.url()).toContain('/dashboard');
  });
});
</example>

<example type="invalid">
// BAD: Unit test with unnecessary service dependencies
test('submits feedback directly to service', async () => {
  const result = await tooltipService.submitFeedback({
    questionId: 'test',
    feedback: 'test feedback'
  });
  expect(result.success).toBe(true);
});

// BAD: Integration test duplicating unit test coverage
test('validates tooltip text', () => {
  // This should be in unit tests
  const tooltip = new TooltipValidator();
  expect(tooltip.validate('test')).toBe(true);
});

// BAD: Missing test provider for component that needs context
test('renders tooltip without provider', () => {
  render(<TooltipUserTesting />); // Missing test provider
});
</example>

## Test Configuration Guidelines

### Jest Configuration
```javascript
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: [
    '<rootDir>/src/setupTests.ts'
  ],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy'
  },
  collectCoverage: true,
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/types/**/*'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
}
```

### Test Setup
```typescript
// setupTests.ts
import '@testing-library/jest-dom';
import 'jest-extended';

// Mock window methods commonly used in tests
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  }))
});
```

### Test Provider Pattern
```typescript
// TestProvider.tsx
import React from 'react';

interface TestProviderProps {
  children: React.ReactNode;
}

export const TestProvider: React.FC<TestProviderProps> = ({ children }) => {
  return (
    <div data-testid="test-provider">
      {children}
    </div>
  );
};

export const withTestProvider = (Component: React.ComponentType<any>, props: any = {}) => {
  return (
    <TestProvider>
      <Component {...props} />
    </TestProvider>
  );
};
```

### Test Overlap Detection
- Use Jest coverage reports to identify overlapping test coverage
- Implement custom scripts to detect similar test descriptions
- Track test coverage overlap between different test suites
- Configure ESLint rules to enforce test boundaries